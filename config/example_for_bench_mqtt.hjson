{
    
    /*
        - refer: https://hjson.github.io/
        
        - $R{8} for random 8 chars

        - if connect only
            - set subs.connections = 0
            - set pubs.packets = 0 
            - set pubs.connections = [connections]

        - if publish only
            - set subs.connections = 0

        - if subscribe only
            - set pubs.connections = 0

        - if subscribe with random topic
            - set subs.topic with random str, for example t1/t2/$R{8}

        - if publish with random topic
            - set pubs.topic with random str, for example t1/t2/$R{8}
    */

    envs: {
        local: {
            address: 127.0.0.1:1883
            accounts:
            [
                {
                    user: test1
                    password: 111
                    client_id: "test1@app_id"
                }
                {
                    user: test2
                    password: 111
                    client_id: "$R{8}@app_id"
                }
            ]

            rest_api: {
                url: http://api.sandbox.mqtt.chat/app/1NQ1E9/v1/rm/chat/publish
                headers: {
                    Authorization: abc
                    content-type: application/json
                }
                body: {
                    clientid: "rest001@1NQ1E9",
                    payload: "",
                    topics: ["t1/t2"],
                    encoding: base64
                }
                payload_in_body:["payload"]
            }
        }
    }
    env: local

    // After all publish, it indicates timeout for waiting for sub connections receiving all packets 
    // which avoid infinite waiting if broker drop some packets
    recv_timeout_ms: 6000

    pubs: {
        connections: 1
        conn_per_sec: 100
        keep_alive_secs: 30
        topic: t1/t2
        qos: QoS1
        qps: 10000
        
        // Add padding when packet size small than this value, 
        // Default is 0.
        // If 0, no padding.
        padding_to_size: 256

        content: "abcdefg",
        packets: 100
        protocol: V4
        clean_session: true
    }
    subs: {
        connections: 1
        conn_per_sec: 100
        keep_alive_secs: 30
        topic: t1/t2
        qos: QoS1
        protocol: V4
        clean_session: true
    }

    verification: {
        clean_up: true
        verify_v4: true
        verify_v5: true
        verify_basic: true
        verify_same_client_id: true
        verify_clean_session: true
        verify_retain: true
        verify_will: true
        verify_shared: false
    }

    rest_pubs: {
        qps: 10
        padding_to_size: 256
        packets: 1
    }
}
